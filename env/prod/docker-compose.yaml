version: "3.7"
name: "${COMPOSE_PROJECT_NAME:-dagster-template-prod}"

services:
  dagster_storage:
    container_name: dagster_storage
    image: postgres:17
    environment:
      POSTGRES_USER: ${DAGSTER_STORAGE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DAGSTER_STORAGE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DAGSTER_STORAGE_POSTGRES_DB}
    networks:
      - docker_example_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: ${DAGSTER_STORAGE_HEALTHCHECK_INTERVAL:-10s}
      timeout: ${DAGSTER_STORAGE_HEALTHCHECK_TIMEOUT:-8s}
      # This will work fine if the value is an integer because Docker will convert the data type automatically/
      retries: ${DAGSTER_STORAGE_HEALTHCHECK_RETRIES:-5}
    expose:
      - ${DAGSTER_STORAGE_EXPOSE_PORT}
    ports:
      - ${DAGSTER_STORAGE_EXPOSE_PORTS_MAPPING}

  dagster_webserver:
    container_name: dagster_webserver
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - ${DAGSTER_WEB_SERVER_PORT}
      - -w
      - workspace.yaml
    expose:
      - ${DAGSTER_WEB_SERVER_PORT}
    ports:
      - ${DAGSTER_WEB_SERVER_PORT_MAPPING}
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_STORAGE_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_STORAGE_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_STORAGE_POSTGRES_DB}
    volumes: # Make docker client accessible, so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      dagster_storage:
        condition: service_healthy
      demo_code_location:
        condition: service_started
      with_openai:
        condition: service_started

  dagster_daemon:
    container_name: dagster_daemon
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_STORAGE_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_STORAGE_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_STORAGE_POSTGRES_DB}
    volumes: # Make docker client accessible, so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      dagster_storage:
        condition: service_healthy
      demo_code_location:
        condition: service_started
      with_openai:
        condition: service_started

  demo_code_location:
    container_name: demo_code_location
    build:
      context: ../../demo-code-location
      dockerfile: Dockerfile
    image: ${DEMO_CODE_LOCATION_IMAGE_NAME}
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_STORAGE_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_STORAGE_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_STORAGE_POSTGRES_DB}
      # By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the run launcher to use this same image when launching runs in a new container as well.
      DAGSTER_CURRENT_IMAGE: ${DEMO_CODE_LOCATION_IMAGE_NAME}
    expose:
      - ${DEMO_CODE_LOCATION_PORT}
    networks:
      - docker_example_network

  with_openai:
    container_name: with_openai
    build:
      context: ../../with_openai
      dockerfile: Dockerfile
    image: ${WITH_OPENAI_CODE_LOCATION_IMAGE_NAME}
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: ${DAGSTER_STORAGE_POSTGRES_USER}
      DAGSTER_POSTGRES_PASSWORD: ${DAGSTER_STORAGE_POSTGRES_PASSWORD}
      DAGSTER_POSTGRES_DB: ${DAGSTER_STORAGE_POSTGRES_DB}
      # By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the run launcher to use this same image when launching runs in a new container as well.
      DAGSTER_CURRENT_IMAGE: ${WITH_OPENAI_CODE_LOCATION_IMAGE_NAME}
    expose:
      - ${WITH_OPENAI_CODE_LOCATION_PORT}
    networks:
      - docker_example_network

networks:
  docker_example_network:
    driver: bridge
    name: docker_example_network